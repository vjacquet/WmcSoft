<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CornerStyle" xml:space="preserve">
    <value>Controls how the corners are drawn.</value>
  </data>
  <data name="CornerStyle.Rounded" xml:space="preserve">
    <value>Corners are always drawn slightly rounded.</value>
  </data>
  <data name="CornerStyle.Squared" xml:space="preserve">
    <value>Corners are always drawn squared off.</value>
  </data>
  <data name="CornerStyle.SystemDefault" xml:space="preserve">
    <value>The corners are drawn according to the current system defaults and style.</value>
  </data>
  <data name="ExplorerBarGroup" xml:space="preserve">
    <value>These are the individual frames that show up in the ExplorerBar control.  They are container controls to which other controls may be added.</value>
  </data>
  <data name="ExplorerBarGroup.CaptionBlend" xml:space="preserve">
    <value>Controls how the background of the caption at the top of this ExplorerBarGroup is painted.</value>
  </data>
  <data name="ExplorerBarGroup.CollapseButtonVisible" xml:space="preserve">
    <value>Indicates whether or not we should show a button on our caption bar which will allow users to collapse or expand this frame.</value>
  </data>
  <data name="ExplorerBarGroup.Enabled" xml:space="preserve">
    <value>Controls whether or not the user can interact with this ExplorerBarGroup with the mouse and keyboard at runtime.</value>
  </data>
  <data name="ExplorerBarGroup.Font" xml:space="preserve">
    <value>The font with which the text in the caption for this ExplorerBarGroup is drawn.</value>
  </data>
  <data name="ExplorerBarGroup.ForeColor" xml:space="preserve">
    <value>The color used to display text and graphics in the control.</value>
  </data>
  <data name="ExplorerBarGroup.Image" xml:space="preserve">
    <value>The image we will display in the caption area.  The image is masked against the ImageTransparentColor on our ExplorerBar control.  The image may be a maximum of 32x32 pixels.</value>
  </data>
  <data name="ExplorerBarGroup.ImageTransparentColor" xml:space="preserve">
    <value>This is the color that the individual ExplorerBarGroups will use to mask the background of their Image properties for transparency.</value>
  </data>
  <data name="ExplorerBarGroup.IsExpanded" xml:space="preserve">
    <value>Controls and/or indicates whether or not we are expanded at this point in time.</value>
  </data>
  <data name="ExplorerBarGroup.Size" xml:space="preserve">
    <value>The size of the control in pixels.</value>
  </data>
  <data name="ExplorerBarGroup.Text" xml:space="preserve">
    <value>The text displayed in the caption across the top of this ExplorerBarGroup.</value>
  </data>
  <data name="ExplorerBarGroup.Visible" xml:space="preserve">
    <value>Controls whether or not this ExplorerBarGroup is visible at runtime.</value>
  </data>
  <data name="ExplorerBarGroupCornerStyle" xml:space="preserve">
    <value>Controls how the top corners of ExplorerBarGroup frames are drawn within the ExplorerBarGroup class.</value>
  </data>
  <data name="ExplorerBar.CollapseAll" xml:space="preserve">
    <value>Collapses all of our child ExplorerBarGroups.</value>
  </data>
  <data name="ExplorerBar.CornerStyle" xml:space="preserve">
    <value>Controls how the top corners of the caption bars at the top of individual child ExplorerBarGroups are drawn.</value>
  </data>
  <data name="ExplorerBar.ExpandAll" xml:space="preserve">
    <value>Expands all of our child ExplorerBarGroups.</value>
  </data>
  <data name="ExplorerBar.GroupCollapsed" xml:space="preserve">
    <value>The given ExplorerBarGroup has been collapsed, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="ExplorerBar.GroupCollapsing" xml:space="preserve">
    <value>The given ExplorerBarGroup is about to be collapsed, either by the user clicking on the collapse button or programmatically via the IsExpanded property.  This can be cancelled.</value>
  </data>
  <data name="ExplorerBar.GroupExpanded" xml:space="preserve">
    <value>The given ExplorerBarGroup has been expanded, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="ExplorerBar.GroupExpanding" xml:space="preserve">
    <value>The given ExplorerBarGroup is about to be expanded, either by the user clicking on the collapse button or programmatically via the IsExpanded property.</value>
  </data>
  <data name="ExplorerBar.Padding" xml:space="preserve">
    <value>Controls how much space will be left between ExplorerBarGroups and between frames and the edge of the ExplorerBar.</value>
  </data>
  <data name="ExplorerBar.ExplorerBarGroups" xml:space="preserve">
    <value>The list of child ExplorerBarGroup objects onto which controls can be placed.</value>
  </data>
  <data name="ExplorerBarEventArgs.Group" xml:space="preserve">
    <value>The ExplorerBarGroup that generated this event within the ExplorerBar control.</value>
  </data>
  <data name="ExplorerBarRemoveAdd" xml:space="preserve">
    <value>Add new ExplorerBarGroup</value>
  </data>
  <data name="ExplorerBarRemoveVerb" xml:space="preserve">
    <value>Remove ExplorerBarGroup</value>
  </data>
  <data name="ExplorerBarTransactionAdd" xml:space="preserve">
    <value>ExplorerBar.Add</value>
  </data>
  <data name="ExplorerBarTransactionRemove" xml:space="preserve">
    <value>ExplorerBar.Remove</value>
  </data>
  <data name="OnlyExplorerBarGroupsCanBeAddedToExplorerBarMessage" xml:space="preserve">
    <value>Only ExplorerBarGroups can be added to ExplorerBar.</value>
  </data>
  <data name="BlendFill.FinishColor" xml:space="preserve">
    <value>The 'finishing' color for the linear blend operation.</value>
  </data>
  <data name="BlendFill.StartColor" xml:space="preserve">
    <value>The 'starting' color for the linear blend operation.</value>
  </data>
  <data name="BlendFill.Style" xml:space="preserve">
    <value>The style of blended painting this object represents.</value>
  </data>
  <data name="BlendFillParseException" xml:space="preserve">
    <value>Unable to parse the BlendFill value.</value>
  </data>
  <data name="BlendStyle" xml:space="preserve">
    <value>Specifies the values for controlling how a background is drawn in various blended controls, such as the BlendPanel.</value>
  </data>
  <data name="BlendStyle.BackwardDiagonal" xml:space="preserve">
    <value>The blend starts with the BlendStartColor at the top-right and blends to the BlendFinishColor at the bottom-left.</value>
  </data>
  <data name="BlendStyle.ForwardDiagonal" xml:space="preserve">
    <value>The blend starts with the BlendStartColor at the top-left, and blends to the BlendFinishColor at the bottom-right.</value>
  </data>
  <data name="BlendStyle.Horizontal" xml:space="preserve">
    <value>The blend starts with the BlendStartColor at the left and blends to the BlendFinishColor at the right.</value>
  </data>
  <data name="BlendStyle.Vertical" xml:space="preserve">
    <value>The blend starts with the BlendStartColor at the top of the panel and blends to the BlendFinishColor at the bottom.</value>
  </data>
</root>